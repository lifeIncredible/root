apply plugin: 'groovy' //必须
apply plugin: 'maven-publish'

dependencies {
    implementation gradleApi() //必须
    implementation localGroovy() //必须
}
repositories {
    google()
    jcenter()
    mavenCentral() //必须
}

//把项目入口设置为src/main/groovy
sourceSets {
    main {
        groovy {
            srcDir 'src/main/groovy'
        }
    }
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            groupId = 'com.atguigu.plugin' //指定GAV坐标信息
            artifactId = 'library'
            version = '1.1'
            //发布jar包
            from components.java
            //引入war插件，发布war包
//            from components.web
        }
    }
    repositories {
        maven { url "$rootDir/lib/release" }
        // 发布项目到私服中
       /* maven {
            // name属性可选,表示仓库名称，url必填
            name = 'myRepo'
            // 发布地址:可以是本地仓库或者maven私服
            // url = layout.buildDirectory.dir("repo")
            // url='http://my.org/repo'
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            // 认证信息:用户名和密码
            credentials {
                username = 'joe'
                password = 'secret'
            }
        }*/
    }

    /*
        常见的发布命令有：
        generatePomFileForPubNamePublication: 生成 pom 文件
        publishPubNamePublicationToRepoNameRepository:发布项目到指定仓库,如果没有仓库名，默认为 maven
        publishPubNamePublicationToMavenLocal: 将 PubName 发布复制到本地 Maven 仓库中包括 POM 文件和其他元数据。
        publish: 发布到 repositories 中指定的仓库(为比如 Maven 私服)
        publishToMavenLocal: 执行所有发布任务中的操作发布到本地 maven 仓库【默认在user/home/目录下的.m2/repository】。
    */


}