rootProject.name = 'root'
include 'subproject01'
include 'subproject02'
include 'subproject03'
include 'atguigu'


/*
Gradle 在生命周期各个阶段都提供了用于回调的钩子函数:

Gradle 初始化阶段:
    在 settings.gradle 执行完后,会回调 Gradle 对象的 settingsEvaluated 方法
    在构建所有工程 build.gradle 对应的 Project 对象后,也既初始化阶段完毕,会回调 Gradle 对象的 projectsLoaded 方法

Gradle 配置阶段:
    Gradle 会循环执行每个工程的 build.gradle 脚本文件
    在执行当前工程 build.gradle 前,会回调 Gradle 对象的 beforeProject 方法和当前 Project 对象的 beforeEvaluate 方法,
     虽然 beforeEvalute 属于 project 的生命周期, 但是此时 build script 尚未被加载, 所以 beforeEvaluate 的设置依然要在 init script 或 setting script 中进行,
     不要在 build script 中使用 project.beforeEvaluate 方法。
    在执行当前工程 build.gradle 后,会回调 Gradle 对象的 afterProject 方法和当前 Project 对象的 afterEvaluate 方法
    在所有工程的 build.gradle 执行完毕后，会回调 Gradle 对象的 projectsEvaluated 方法
    在构建 Task 依赖有向无环图后,也就是配置阶段完毕,会回调 TaskExecutionGraph 对象的 whenReady 方法

Gradle 执行阶段:
    Gradle 会循环执行 Task 及其依赖的 Task
    在当前 Task 执行之前,会回调 TaskExecutionGraph 对象的 beforeTask 方法
    在当前 Task 执行之后,会回调 TaskExecutionGraph 对象的 afterTask 方法

当所有的 Task 执行完毕后，会回调 Gradle 对象的 buildFinish 方法。
*/



// 1.settingsEvaluated钩子函数,在初始化阶段完成
gradle.settingsEvaluated {
    println("settingsEvaluated")
}

// 2.projectsLoaded钩子函数,在初始化阶段完成
gradle.projectsLoaded {
    println("projectsLoaded")
}

//声明一个变量：表示当前项目名,在每次执行某个项目的beforeEvaluate方法时先给projectName变量赋值
//这样方便在：gradle.beforeProject和afterProject两个钩子函数使用。
def projectName = ""
gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
// 3.执行各个project的beforeEvaluate：在配置阶段完成
    @Override
    void beforeEvaluate(Project project) {
        projectName = project.name
        println "${project.name} Project beforeEvaluate"
    }

// 5.执行各个project的afterEvaluate：在配置阶段完成
    @Override
    void afterEvaluate(Project project, ProjectState projectState) {
        println "${project.name} Project afterEvaluate"
    }
})

// 4.执行各个project的beforeProject：在配置阶段完成
gradle.beforeProject {
    println "${projectName} beforeProject..."
}

// 6.执行各个project的afterProject：在配置阶段完成
gradle.afterProject {
    println "${projectName} afterProject..."
}

// 7.所有工程的 build.gradle 执行完毕后，回调 Gradle 对象的 projectsEvaluated 方法：在配置阶段完成
def rootProjectName = rootProject.getName()
gradle.projectsEvaluated {
    println "${rootProjectName} projectsEvaluated..."
}

// 8.配置阶段完毕后，回调 TaskExecutionGraph 对象的 whenReady 方法：在配置阶段完成
gradle.taskGraph.whenReady {
    println "${rootProjectName} taskGraph whenReady..."
}

// 9.在当前Task执行之前,会回调 TaskExecutionGraph 对象的 beforeTask方法：在执行阶段完成
gradle.taskGraph.beforeTask { task ->
    println "this is the task ${task.name} of the project ${task.getProject().name} beforeTask.."
}

// 10.在当前Task执行之后,会回调 TaskExecutionGraph 对象的 afterTask方法：在执行阶段完成
gradle.taskGraph.afterTask { task ->
    println "this is the task ${task.name} of the project ${task.getProject().name} afterTask.."
}

// 11.当所有的 Task 执行完毕后，会回调 Gradle 对象的 buildFinish 方法：在执行阶段完成
gradle.buildFinished {
    println "${rootProjectName} buildFinished..."
}

// 监听器
gradle.taskGraph.addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
    @Override //生成有向无环图
    void graphPopulated(TaskExecutionGraph taskExecutionGraph) {
        taskExecutionGraph.allTasks.forEach(task->{
            //核心逻辑:通过taskExecutionGraph获得所有的task
            taskExecutionGraph.allTasks.forEach(releaseTask->{
                println "尚硅谷:" + releaseTask.getProject().name + ":" + releaseTask.name
            })
        })
    }
})

